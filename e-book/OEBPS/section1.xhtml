<?xml version="1.0" encoding="UTF-8" standalone="no" ?><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta content="http://www.w3.org/1999/xhtml; charset=utf-8" http-equiv="Content-Type"/>
<link href="styles/zstylesheet.css" rel="stylesheet" type="text/css"/>
<title>Section 1 - Basic Types and Operators</title>
</head>

<body>
	<h2 class="heading">Section 1<br/>Basic Types and Operators</h2>
	<hr class="black-line"/>
	
	<p class="noindent top">C provides a standard, minimal set of basic data types. Sometimes these are called "primitive" types. More complex data structures can be built up from these basic types.</p>

	<h1 class="subheading">Integer Types</h1>
	<p class="noindent">The "integral" types in C form a family of integer types. They all behave like integers and can be mixed together and used in similar ways. The differences are due to the different number of bits ("widths") used to implement each type -- the wider types can store a greater ranges of values.</p>

	<p class="top"><span class="mono">char</span> ASCII character -- at least 8 bits. Pronounced "car". As a practical matter char is basically always a byte which is 8 bits which is enough to store a single ASCII character. 8 bits provides a signed range of -128..127 or an unsigned range is 0..255. <span class="mono">char</span> is also required to be the "smallest addressable unit" for the machine -- each byte in memory has its own address.</p>
	
	<p class="top"><span class="mono">short</span> Small integer -- at least 16 bits which provides a signed range of -32768..32767. Typical size is 16 bits. Not used so much.</p>

	<p class="top"><span class="mono">int</span> Default integer -- at least 16 bits, with 32 bits being typical. Defined to be the "most comfortable" size for the computer. If you do not really care about the range for an integer variable, declare it int since that is likely to be an appropriate size (16 or 32 bit) which works well for that machine.</p>

	<p class="top"><span class="mono">long</span> Large integer -- at least 32 bits. Typical size is 32 bits which gives a signed range of about -2 billion ..+2 billion. Some compilers support "long long" for 64 bit ints.</p>

	<p class="noindent top">The integer types can be preceded by the qualifier <span class="mono">unsigned</span> which disallows representing negative numbers, but doubles the largest positive number representable. For example, a 16 bit implementation of <span class="mono">short</span> can store numbers in the range -32768..32767, while <span class="mono">unsigned short</span> can store 0..65535. You can think of pointers as being a form of <span class="mono">unsigned long</span> on a machine with 4 byte pointers. In my opinion, it's best to avoid using <span class="mono">unsigned</span> unless you really need to. It tends to cause more misunderstandings and problems than it is worth.</p>

	<h1 class="subheading">Extra: Portability Problems</h1>
	<p class="noindent">Instead of defining the exact sizes of the integer types, C defines lower bounds. This makes it easier to implement C compilers on a wide range of hardware. Unfortunately it occasionally leads to bugs where a program runs differently on a 16-bit-int machine than it runs on a 32-bit-int machine. In particular, if you are designing a function that will be implemented on several different machines, it is a good idea to use typedefs to set up types like Int32 for 32 bit int and Int16 for 16 bit int. That way you can prototype a function Foo(Int32) and be confident that the typedefs for each machine will be set so that the function really takes exactly a 32 bit int. That way the code will behave the same on all the different machines.</p>

	<h1 class="subheading">char Constants</h1>
	<p class="noindent">A char constant is written with single quotes (') like 'A' or 'z'. The char constant 'A' is really just a synonym for the ordinary integer value 65 which is the ASCII value for uppercase 'A'. There are special case char constants, such as '\t' for tab, for characters which are not convenient to type on a keyboard.</p>
	
	<p class="top"><span class="mono">'A'</span>&#160;&#160;uppercase 'A' character</p>
	<p><span class="mono">'\n'</span>&#160;&#160;newline character</p>
	<p><span class="mono">'\t'</span>&#160;&#160;tab character</p>
	<p><span class="mono">'\0'</span>&#160;&#160;the "null" character -- integer value 0 (different from the char digit '0')</p>
	<p><span class="mono">'\012'</span>&#160;&#160;the character with value 12 in octal, which is decimal 10</p>

	<h1 class="subheading">int Constants</h1>
	<p class="noindent">Numbers in the source code such as <span class="mono">234</span> default to type int. They may be followed by an 'L' (upper or lower case) to designate that the constant should be a long such as 42L. An integer constant can be written with a leading 0x to indicate that it is expressed in hexadecimal -- 0x10 is way of expressing the number 16. Similarly, a constant may be written in octal by preceding it with "0" -- 012 is a way of expressing the number 10.</p>

	<h1 class="subheading">Type Combination and Promotion</h1>
	<p class="noindent">The integral types may be mixed together in arithmetic expressions since they are all basically just integers with variation in their width. For example, char and int can be combined in arithmetic expressions such as ('b' + 5). How does the compiler deal with the different widths present in such an expression? In such a case, the compiler "promotes" the smaller type (char) to be the same size as the larger type (int) before combining the values. Promotions are determined at compile time based purely on the types of the values in the expressions. Promotions do not lose information -- they always convert from a type to compatible, larger type to avoid losing information.</p>

	<h1 class="subheading">Pitfall -- int Overflow</h1>
	<p class="noindent">I once had a piece of code which tried to compute the number of bytes in a buffer with the expression (<span class="mono">k * 1024</span>) where k was an <span class="mono">int</span> representing the number of kilobytes I wanted. Unfortunately this was on a machine where int happened to be 16 bits. Since <span class="mono">k</span> and 1024 were both <span class="mono">int</span>, there was no promotion. For values of k &gt;= 32, the product was too big to fit in the 16 bit int resulting in an overflow. The compiler can do whatever it wants in overflow situations -- typically the high order bits just vanish. One way to fix the code was to rewrite it as (<span class="mono">k * 1024L</span>) -- the long constant forced the promotion of the int. This was not a fun bug to track down -- the expression sure looked reasonable in the source code. Only stepping past the key line in the debugger showed the overflow problem. "Professional Programmer's Language." This example also demonstrates the way that C only promotes based on the <b>types</b> in an expression. The compiler does not consider the values 32 or 1024 to realize that the operation will overflow (in general, the values don't exist until run time anyway). The compiler just looks at the compile time types, <span class="mono">int</span> and <span class="mono">int</span> in this case, and thinks everything is fine.</p>

	<h1 class="subheading">Floating point Types</h1>
	<table class="invisible">
		<tr><td class="invisible">&#160;&#160;&#160;<span class="mono">float</span></td><td class="invisible">Single precision floating point number</td><td class="invisible">typical size: 32 bits</td></tr>
		<tr><td class="invisible">&#160;&#160;&#160;<span class="mono">double</span></td><td class="invisible">Double precision floating point number</td><td class="invisible">typical size: 64 bits</td></tr>
		<tr><td class="invisible">&#160;&#160;&#160;<span class="mono">long double</span></td><td class="invisible">Possibly even bigger floating point number</td><td class="invisible">(somewhat obscure)</td></tr>
	</table>

	<p class="noindent top">Constants in the source code such as 3.14 default to type double unless the are suffixed with an 'f' (float) or 'l' (long double). Single precision equates to about 6 digits of precision and double is about 15 digits of precision. Most C programs use double for their computations. The main reason to use float is to save memory if many numbers need to be stored. The main thing to remember about floating point numbers is that they are inexact. For example, what is the value of the following double expression?</p>

	<p class="mono top">(1.0/3.0 + 1.0/3.0 + 1.0/3.0)&#160;&#160;// is this equal to 1.0 exactly?</p>

	<p class="noindent top">The sum may or may not be 1.0 exactly, and it may vary from one type of machine to another. For this reason, you should never compare floating numbers to each other for equality (==) -- use inequality (&lt;) comparisons instead. Realize that a correct C program run on different computers may produce slightly different outputs in the rightmost digits of its floating point computations.</p>

	<h1 class="subheading">Comments</h1>
	<p class="noindent">Comments in C are enclosed by slash/star pairs: <span class="mono">/* .. comments .. */</span> which may cross multiple lines. C++ introduced a form of comment started by two slashes and extending to the end of the line: <span class="mono">// comment until the line end</span><br/>The // comment form is so handy that many C compilers now also support it, although it is not technically part of the C language.</p>
	<p>Along with well-chosen function names, comments are an important part of well written code. Comments should not just repeat what the code says. Comments should describe what the code <b>accomplishes</b> which is much more interesting than a translation of what each statement does. Comments should also narrate what is tricky or non-obvious about a section of code.</p>

	<h1 class="subheading">Variables</h1>
	<p class="noindent">As in most languages, a variable declaration reserves and names an area in memory at run time to hold a value of particular type. Syntactically, C puts the type first followed by the name of the variable. The following declares an <span class="mono">int</span> variable named "<span class="mono">num</span>" and the 2<sup>nd</sup> line stores the value 42 into <span class="mono">num</span>.</p>

	<p class="mono top">int num;</p>
	<p class="mono">num = 42;</p>
	
	<p class="mono top">num <span class="var-box">42</span></p>

	<p class="noindent top">A variable corresponds to an area of memory which can store a value of the given type. Making a drawing is an excellent way to think about the variables in a program. Draw each variable as box with the current value inside the box. This may seem like a "beginner" technique, but when I'm buried in some horribly complex programming problem, I invariably resort to making a drawing to help think the problem through.</p>
	<p>Variables, such as num, do not have their memory cleared or set in any way when they are allocated at run time. Variables start with random values, and it is up to the program to set them to something sensible before depending on their values.</p>
	<p>Names in C are case sensitive so "x" and "X" refer to different variables. Names can contain digits and underscores (_), but may not begin with a digit. Multiple variables can be declared after the type by separating them with commas. C is a classical "compile time" language -- the names of the variables, their types, and their implementations are all flushed out by the compiler at compile time (as opposed to figuring such details out at run time like an interpreter).</p>

	<p class="mono top">float x, y, z, X;</p>

	<h1 class="subheading">Assignment Operator =</h1>
	<p class="noindent">The assignment operator is the single equals sign (=).</p>
	
	<p class="mono top">i = 6;</p>
	<p class="mono">i = i + 1;</p>

	<p class="noindent top">The assignment operator copies the value from its right hand side to the variable on its left hand side. The assignment also acts as an expression which returns the newly assigned value. Some programmers will use that feature to write things like the following.</p>

	<p class="mono top">y = (x = 2 * x);&#160;&#160;// double x, and also put x's new value in y</p>

	<h1 class="subheading">Truncation</h1>
	<p class="noindent">The opposite of promotion, truncation moves a value from a type to a smaller type. In that case, the compiler just drops the extra bits. It may or may not generate a compile time warning of the loss of information. Assigning from an integer to a smaller integer (e.g.. long to int, or int to char) drops the most significant bits. Assigning from a floating point type to an integer drops the fractional part of the number.</p>

	<p class="mono top">char ch;</p>
	<p class="mono">int i;</p>
	
	<p class="mono top">i = 321;</p>
	<p class="mono">ch = i;&#160;&#160;// truncation of an int value to fit in a char</p>
	<p class="mono">// ch is now 65</p>

	<p class="noindent top">The assignment will drop the upper bits of the int 321. The lower 8 bits of the number 321 represents the number 65 (321 - 256). So the value of ch will be (char)65 which happens to be 'A'.</p>
	<p>The assignment of a floating point type to an integer type will drop the fractional part of the number. The following code will set i to the value 3. This happens when assigning a floating point number to an integer or passing a floating point number to a function which takes an integer.</p>

	<p class="mono top">double pi;</p>
	<p class="mono">int i;</p>
	
	<p class="mono top">pi = 3.14159;</p>
	<p class="mono">i = pi;&#160;&#160;// truncation of a double to fit in an int</p>
	<p class="mono">// i is now 3</p>

	<h1 class="subheading">Pitfall -- int vs. float Arithmetic</h1>
	<p class="noindent">Here's an example of the sort of code where int vs. float arithmetic can cause problems. Suppose the following code is supposed to scale a homework score in the range 0..20 to be in the range 0..100.</p>

	<p class="mono top">{</p>
	<p class="mono">&#160;&#160;&#160;int score;</p>
	<p class="mono">...// suppose score gets set in the range 0..20 somehow</p>
	<p class="mono">&#160;&#160;&#160;score = (score / 20) * 100;&#160;&#160;// NO -- score/20 truncates to 0</p>
	<p class="mono">...</p>

	<p class="noindent top">Unfortunately, score will almost always be set to 0 for this code because the integer division in the expression (<span class="mono">score/20</span>) will be 0 for every value of score less than 20. The fix is to force the quotient to be computed as a floating point number...</p>

	<p class="mono top">score = ((double)score / 20) * 100;&#160;&#160;// OK -- floating point division from cast</p>
	<p class="mono">score = (score / 20.0) * 100;&#160;&#160;// OK -- floating point division from 20.0</p>
	<p class="mono">score = (int)(score / 20.0) * 100;&#160;&#160;// NO -- the (int) truncates the floating // quotient back to 0</p>

	<h1 class="subheading">No Boolean -- Use int</h1>
	<p class="noindent">C does not have a distinct boolean type-- int is used instead. The language treats integer 0 as false and all non-zero values as true. So the statement...</p>

	<p class="top mono">i = 0;</p>
	<p class="mono">while (i - 10) {</p>
	<p class="mono">&#160;&#160;...</p>

	<p class="noindent top">will execute until the variable i takes on the value 10 at which time the expression (<span class="mono">i - 10</span>) will become false (i.e. 0). (we'll see the while() statement a bit later)</p>

	<h1 class="subheading">Mathematical Operators</h1>
	<p class="noindent">C includes the usual binary and unary arithmetic operators. See the appendix for the table of precedence. Personally, I just use parenthesis liberally to avoid any bugs due to a misunderstanding of precedence. The operators are sensitive to the type of the operands. So division (/) with two integer arguments will do integer division. If either argument is a float, it does floating point division. So (6/4) evaluates to 1 while (6/4.0) evaluates to 1.5 -- the 6 is promoted to 6.0 before the division.</p>

	<p class="top"><span class="mono">+</span>&#160;&#160;Addition</p>
	<p class="top"><span class="mono">-</span>&#160;&#160;Subtraction</p>
	<p class="top"><span class="mono">/</span>&#160;&#160;Division</p>
	<p class="top"><span class="mono">*</span>&#160;&#160;Multiplication</p>
	<p class="top"><span class="mono">%</span>&#160;&#160;Remainder (mod)</p>

</body>
</html>
